ALL VERSIONS
[>18] Expressions and Operators
MMBasic will evaluate a mathematical expression using the standard mathematical rules. For example, multiplication and division are performed first followed by addition and subtraction. 
These are called the rules of precedence and are detailed below. 
This means that 2 + 3 * 6 will resolve to 20, so will 5 * 4 and also 10 + 4 * 3 - 2.
If you want to force the interpreter to evaluate parts of the expression first you can surround that part of the expression with brackets. 
For example, (10 + 4) * (3 - 2) will resolve to 14 not 20 as would have been the case if the brackets were not used. 
Using brackets does not appreciably slow down the program so you should use them liberally if there is a chance that MMBasic will misinterpret your intention.
The following operators, in order of precedence, are implemented in MMBasic. 
Operators that are on the same level (for example + and -) are processed with a left to right precedence as they occur on the program line.
<CGRE>
Arithmetic operators:
</CGRE>

^           Exponentiation (eg, b^n means bn) <MRK>14,1,2
* / \ MOD   Multiplication, division, integer division and modulus (remainder)<MRK>14,1,10
+ -         Addition and subtraction<MRK>14,1,4

<CGRE>
Shift operators:
</CGRE>

x << y x >> y<MRK>14,1,14
These operate in a special way. << means that the value returned will be the value of x shifted by y bits to the left while >> means the same only right shifted. 
They are integer functions and any bits shifted off are discarded and any bits introduced are set to zero.

<CGRE>
Logical operators:
</CGRE>

NOT INV     invert the logical value on the right (eg, NOT(a=b) is a<>b) or bitwise inversion of the value on the right (eg, a = INV b)<MRK>14,1,8

<>      < >     <=      =<      >=      =>      Inequality, less than, greater than, less than or equal to, less than or equal to (alternative version), greater than or equal to, greater than or equal to (alternative version)<MRK>14,1,28

=   equality <MRK>14,1,11

AND OR XOR      Conjunction, disjunction, exclusive or<MRK>14,1,12

For Microsoft compatibility the operators AND, OR and XOR are integer bitwise operators. For example:
<CODE>
PRINT (3 AND 6) 
</CODE>

will output the number 2. 
Because these operators can act as both logical operators (for example, IF a=5 AND b=8 THEN ...) and as bitwise operators (eg, y% = x% AND &B1010) the interpreter will be confused 
if they are mixed in the same expression. So, always evaluate logical and bitwise expressions in separate expressions.
The other logical operations result in the integer 0 (zero) for false and 1 for true. 
For example the statement PRINT 4 >= 5 will print the number zero on the output and the expression A = 3 > 2 will store +1 in A.

The NOT operator will invert the logical value on its right (it is not a bitwise invert) while the INV operator will perform a bitwise invert. 
Both of these have the highest precedence so they will bind tightly to the next value. 
For normal use of NOT or INV the expression to be operated on should be placed in brackets. Eg:
<CODE>
IF NOT (A = 3 OR A = 8) THEN ...
</CODE>
<CGRE>
String operators:
</CGRE>

+       Join two strings<MRK>14,1,2

<>      < >     <=      =<      >=      =><MRK>14,1,23
Inequality, less than, greater than, less than or equal to, less than or equal to (alternative version), greater than or equal to, greater than or equal to (alternative version)

=       Equality<MRK>14,1,2
String comparisons respect case. For example "A" is greater than "a".
<CGRE>
MIXING FLOATING POINT AND INTEGERS
</CGRE>

MMBasic automatically handles conversion of numbers between floating point and integers. 
If an operation mixes both floating point and integers (eg, PRINT A% + B!) the integer will be converted to a floating point number first, 
then the operation performed and a floating point number returned. 
If both sides of the operator are integers then an integer operation will be performed and an integer returned.
The one exception is the normal division ("/") which will always convert both sides of the expression to a floating point number and then returns a floating point number. 
For integer division you should use the integer division operator "\".
MMBasic functions will return a float or integer depending on their characteristics. 
For example, PIN() will return an integer when the pin is configured as a digital input but a float when configured as an analog input.
If necessary you can convert a float to an integer with the INT() function. 
It is not necessary to specifically convert an integer to a float but if it was needed the integer value could be assigned 
to a floating point variable and it will be automatically converted in the assignment.
<CGRE>
64-BIT UNSIGNED INTEGERS 
</CGRE>

MMBasic supports 64-bit signed integers. This means that there are 63 bits for holding the number and one bit (the most significant bit) 
which is used to indicate the sign (positive or negative). 
However it is possible to use full 64-bit unsigned numbers as long as you do not do any arithmetic on the numbers.
64-bit unsigned numbers can be created using the &H, &O or &B prefixes to a number and these numbers can be stored in an integer variable. 
You then have a limited range of operations that you can perform on these.
They are << (shift left), >> (shift right), AND (bitwise and), OR (bitwise or), XOR (bitwise exclusive or), INV (bitwise inversion), = (equal to) and <> (not equal to). 
Arithmetic operators such as division or addition may be confused by a 64-bit unsigned number and could return nonsense results.
To display 64-bit unsigned numbers you should use the HEX$(), OCT$() or BIN$() functions.
For example, the following 64-bit unsigned operation will return the expected results:
<CODE>
X% = &HFFFF0000FFFF0044
Y% = &H800FFFFFFFFFFFFF
X% = X% AND Y%
PRINT HEX$(X%, 16)
</CODE>

Will display "800F0000FFFF0044"
