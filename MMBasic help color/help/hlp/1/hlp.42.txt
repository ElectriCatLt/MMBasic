ALL VERSIONS
[>43] A Tutorial - INTEGERS
So far all the numbers and variables that we have been using have been floating point. As explained before, floating point is handy because it will track digits after the decimal point and when you use division it will return a sensible result. 
So, if you just want to get things done and are not concerned with the details you should stick to floating point. 
However, the limitation of floating point is that it stores numbers as an approximation with an accuracy of 14 digits in the PicoMite firmware . 
Most times this characteristic of floating point numbers is not a problem but there are some cases where you need to accurately store larger numbers.
As an example, let us say that you want to manipulate time accurately down to the microsecond so that you can compare two different date/times to work out which one is earlier. 
The easy way to do this is to convert the date/time to the number of microseconds since some date (say 1st Jan in year zero) - then finding the earliest of the two is just a matter of using an arithmetic compare in an IF statement.
The problem is that the number of microseconds since that date will exceed the accuracy range of floating point variables and this is where integer variables come in. 
An integer variable can accurately hold very large numbers up to nine million million million (or Â±9223372036854775807 to be precise).
The downside of using an integer is that it cannot store fractions (ie, numbers after the decimal point).
Any calculation that produces a fractional result will be rounded up or down to the nearest whole number when assigned to an integer. 
However this characteristic can be handy when dealing with money - for example, you don't want to send someone a bill for $100.13333333333.
It is easy to create an integer variable, just add the percent symbol (%) as a suffix to a variable name. 
For example, 
<CODE>
sec% 
</CODE>

is an integer variable. Within a program you can mix integers and floating point and MMBasic will make the necessary conversions but if you want to maintain the full accuracy of integers you should avoid mixing the two.
Just like floating point you can have arrays of integers, all you need to do is add the percent character as a suffix to the array name. 
For example: 
<CODE>
days%(365, 5).
</CODE>

Beginners often get confused as to when they should use floating point or integers and the answer is simple... always use floating point unless you need an extremely high level of accuracy. 
This does not happen often but when you need them you will find that integers are quite useful.
